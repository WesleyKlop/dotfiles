# Self-elevate the script if required
if (-Not ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] 'Administrator')) {
  if ([int](Get-CimInstance -Class Win32_OperatingSystem | Select-Object -ExpandProperty BuildNumber) -ge 6000) {
    $CommandLine = "-ExecutionPolicy Bypass -NoExit -File `"" + $MyInvocation.MyCommand.Path + "`" " + $MyInvocation.UnboundArguments
    Start-Process -FilePath PowerShell.exe -Verb RunAs -ArgumentList $CommandLine -Wait
    Exit
  }
}
Function Test-CommandExists {
  Param ($command)

  $oldPreference = $ErrorActionPreference
  $ErrorActionPreference = "stop"

  try {
    if (Get-Command $command) {
      return $true
    }
  }
  Catch {
    return $false
  }
  Finally {
    $ErrorActionPreference = $oldPreference
  }
}

# Install Chocolatey if it is not already installed
if (-Not (Test-CommandExists "choco")) {
  Set-ExecutionPolicy Bypass -Scope Process -Force
  [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
  Invoke-Expression ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
}

Write-Host "Installing Chocolatey packages..."
choco upgrade chocolatey

Write-Host "Installing packages always used"
choco upgrade git openssh powertoys powershell-core 1password microsoft-windows-terminal
